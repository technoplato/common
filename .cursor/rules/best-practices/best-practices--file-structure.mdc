---
description: Best practices for file and directory organization
globs: *.ts,*.tsx
alwaysApply: true
---

## File Structure

- Use lower-kebab-case for directories and files.
- Import paths should start with @/.
- Place files as close as possible to where they are used.
- Follow the feature-based organization pattern.
- Use descriptive suffixes for files that indicate their purpose.

```
// ❌ Bad: Unclear names
utils.ts
types.ts

// ✅ Good: Clear names with feature prefix and purpose suffix
profile.screen.tsx
messages.query.ts
auth.client.ts
```

### Feature-Based Organization

Organize code by features rather than technical concerns. Each feature should be self-contained with its own components, screens, utilities, etc.

Feature directories may contain:

- `components/` - UI components specific to the feature
- `screens/` - Screen components for the feature
- `navigation/` - Navigation-related code
- `hooks/` - Custom hooks
- `utils/` - Utility functions
- `data/` - Data management
- `clients/` - API clients
- `queries/` - React Query related code
- `types/` - TypeScript types
- `actors/` - XState actors

### File Naming Convention

Name files with the feature name as prefix and a descriptive suffix indicating the file's purpose:

```
[featureName].screen.tsx
[featureName].nav.tsx
[featureName].store.ts
[featureName].query.ts
[featureName].utils.ts
[featureName].types.ts
[featureName].test.ts
```

Example structure:

```
features/
└── accounts/
    ├── components/
    │   ├── account-card.component.tsx
    │   └── account-settings.component.tsx
    ├── screens/
    │   └── accounts.screen.tsx
    ├── navigation/
    │   └── accounts.nav.tsx
    ├── hooks/
    │   └── accounts.hooks.ts
    ├── utils/
    │   └── accounts.utils.ts
    ├── data/
    ├── accounts.query.ts
    └── accounts.types.ts
```

This organization ensures that:

1. Related code stays together
2. Files are easy to find based on their name
3. The purpose of each file is clear from its suffix
4. Features are modular and self-contained 